<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Configure Approval Rules</title>
    
    <style>
        body { font-family: sans-serif; padding: 20px; background-color: #f4f4f9; }
        .page-container { max-width: 900px; margin: 0 auto; background-color: #ffffff; padding: 30px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }
        h1 { color: #dc3545; margin-bottom: 25px; border-bottom: 2px solid #eee; padding-bottom: 10px; }
        h2 { color: #555; margin-top: 25px; margin-bottom: 15px; }
        
        .rule-section { border: 1px solid #ddd; padding: 15px; border-radius: 6px; margin-bottom: 20px; }
        
        .form-row { display: flex; gap: 20px; margin-bottom: 15px; }
        .form-group { flex: 1; }
        .form-group.full-width { flex: none; width: 100%; }

        label { display: block; font-weight: bold; margin-bottom: 5px; color: #333; }
        input[type="text"], input[type="number"], select { width: 100%; padding: 10px; border: 1px solid #ccc; border-radius: 4px; }
        
        .btn { padding: 10px 18px; border: none; border-radius: 4px; cursor: pointer; color: white; font-weight: bold; transition: background-color 0.2s; }
        .btn-save { background-color: #28a745; margin-top: 20px; }
        .btn-save:hover { background-color: #218838; }

        #notification {
            background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb;
            padding: 10px; margin-top: 20px; border-radius: 4px; display: none;
        }
    </style>
</head>
<body>

<div class="page-container">
    <h1>Admin: Configure Approval Rules</h1>
    <form id="rulesForm">
        
        <div class="rule-section">
            <h2>1. General Manager Approval Limit</h2>
            <p>Define the maximum amount a standard Manager can approve without requiring secondary Admin review.</p>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="limit-amount">Maximum Approval Amount (USD)</label>
                    <input type="number" id="limit-amount" value="5000" min="100" step="100">
                </div>
                <div class="form-group">
                    <label for="escalation-role">Escalate to Role (Above Limit)</label>
                    <select id="escalation-role">
                        <option value="Admin">Admin</option>
                        <option value="Finance">Finance Director</option>
                        <option value="CEO">CEO</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="rule-section">
            <h2>2. Category-Specific Limits</h2>
            <p>Set specific limits for expense categories that may override the general limit.</p>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="meal-limit">Max Meal Expense per Person (USD)</label>
                    <input type="number" id="meal-limit" value="75" min="10" step="5">
                </div>
                <div class="form-group">
                    <label for="travel-limit">Max Flight Class (Cost Limit - USD)</label>
                    <input type="number" id="travel-limit" value="1500" min="100" step="100">
                </div>
            </div>
            <div class="form-group full-width">
                 <label for="policy-note">Policy Violation Note</label>
                 <input type="text" id="policy-note" value="Flagged items require a mandatory explanation from the employee." readonly>
            </div>
        </div>
        
        <div class="rule-section">
            <h2>3. Automated Rejection/Blocking</h2>
            <div class="form-row">
                <div class="form-group">
                    <label for="block-keyword">Block if Description Contains</label>
                    <input type="text" id="block-keyword" value="Alcohol, Gift Card">
                </div>
                <div class="form-group">
                    <label for="block-action">Action</label>
                    <select id="block-action">
                        <option value="Reject">Auto-Reject</option>
                        <option value="Flag">Flag for Review</option>
                    </select>
                </div>
            </div>
        </div>

        <button type="submit" class="btn btn-save">ðŸ’¾ Save All Approval Rules</button>
    </form>
    
    <div id="notification"></div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('rulesForm');
        const notification = document.getElementById('notification');

        // Function to load saved rules (Simulated)
        const loadRules = () => {
            
        };

        const saveRules = (e) => {
            e.preventDefault();

            const rules = {
                generalLimit: document.getElementById('limit-amount').value,
                escalationRole: document.getElementById('escalation-role').value,
                mealLimit: document.getElementById('meal-limit').value,
                travelLimit: document.getElementById('travel-limit').value,
                blockKeyword: document.getElementById('block-keyword').value,
                blockAction: document.getElementById('block-action').value,
            };

            console.log('Rules Saved:', rules);
            
            notification.textContent = `SUCCESS! Approval rules saved. General limit set to USD ${rules.generalLimit}, escalating to ${rules.escalationRole}.`;
            notification.style.display = 'block';

            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        };

        form.addEventListener('submit', saveRules);
        loadRules(); 
    });
</script>

</body>
</html>- View All Expenses</title>
    
    <style>
        body { font-family: sans-serif; padding: 20px; background-color: #f4f4f9; }
        .page-container { max-width: 1400px; margin: 0 auto; background-color: #ffffff; padding: 25px; border-radius: 8px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }
        h1 { color: #dc3545; margin-bottom: 20px; }
        table { width: 100%; border-collapse: collapse; margin-top: 15px; }
        th, td { padding: 12px 15px; border: 1px solid #ddd; text-align: left; }
        th { background-color: #dc3545; color: white; font-weight: 600; }
        tbody tr:hover { background-color: #f1f1f1; }
        
        .controls { margin-bottom: 20px; display: flex; gap: 10px; align-items: center; }
        .controls label { font-weight: bold; }
        .controls select { padding: 8px; border-radius: 4px; }
        .btn { padding: 8px 12px; border: none; border-radius: 4px; cursor: pointer; color: white; margin-right: 5px; }
        .btn-view { background-color: #007bff; }
        .btn-override { background-color: #ffc107; color: #333; }

        .status { padding: 4px 8px; border-radius: 12px; font-weight: bold; font-size: 0.9em; }
        .draft { background-color: #e9ecef; color: #6c757d; }
        .pending { background-color: #fff3cd; color: #856404; }
        .approved { background-color: #d4edda; color: #155724; }
        .rejected { background-color: #f8d7da; color: #721c24; }
    </style>
</head>
<body>

<div class="page-container">
    <h1>Admin: View All Company Expenses</h1>

    <div class="controls">
        <label for="status-filter">Filter by Status:</label>
        <select id="status-filter">
            <option value="ALL">ALL Reports</option>
            <option value="Pending">Pending</option>
            <option value="Approved">Approved</option>
            <option value="Rejected">Rejected</option>
            <option value="Draft">Draft</option>
        </select>
        <div id="report-count">Total Reports: 0</div>
    </div>

    <table id="expense-table">
        <thead>
            <tr>
                <th>Report ID</th>
                <th>Employee</th>
                <th>Manager</th>
                <th>Report Name</th>
                <th>Total Amount (USD)</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody id="expenseTableBody">
            </tbody>
    </table>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        let allReports = [
            { id: 101, employee: "Jane Doe", manager: "Sarah Chen", name: "Q1 Travel", amount: 1450.75, status: "Approved" },
            { id: 102, employee: "Alex Smith", manager: "Sarah Chen", name: "Client Dinner", amount: 189.50, status: "Pending" },
            { id: 103, employee: "Mike Johnson", manager: "David Lee", name: "Software Subscription", amount: 49.99, status: "Rejected" },
            { id: 104, employee: "Jane Doe", manager: "Sarah Chen", name: "New Laptop Purchase", amount: 999.00, status: "Pending" },
            { id: 105, employee: "Mike Johnson", manager: "David Lee", name: "Local Mileage", amount: 55.00, status: "Draft" },
            { id: 106, employee: "Alex Smith", manager: "Sarah Chen", name: "Training Course", amount: 350.00, status: "Approved" }
        ];

        const tableBody = document.getElementById('expenseTableBody');
        const statusFilter = document.getElementById('status-filter');
        const reportCount = document.getElementById('report-count');

        const renderTable = (filterStatus = 'ALL') => {
            tableBody.innerHTML = '';
            
            // Apply filtering logic
            const filteredReports = allReports.filter(report => {
                return filterStatus === 'ALL' || report.status === filterStatus;
            });

            reportCount.textContent = `Total Reports: ${filteredReports.length}`;

            if (filteredReports.length === 0) {
                const emptyRow = document.createElement('tr');
                emptyRow.innerHTML = `<td colspan="7" style="text-align: center; color: #999; font-style: italic;">
                    No reports match the current filter.
                </td>`;
                tableBody.appendChild(emptyRow);
                return;
            }

            filteredReports.forEach(report => {
                const row = document.createElement('tr');
                
                let actionsHtml = `<button class="btn btn-view" data-action="view">View</button>`;
                
                if (report.status === 'Approved' || report.status === 'Rejected') {
                    actionsHtml += `<button class="btn btn-override" data-action="override">Override</button>`;
                }
                
                row.innerHTML = `
                    <td>${report.id}</td>
                    <td>${report.employee}</td>
                    <td>${report.manager}</td>
                    <td>${report.name}</td>
                    <td>$${report.amount.toFixed(2)}</td>
                    <td><span class="status ${report.status.toLowerCase()}">${report.status}</span></td>
                    <td>${actionsHtml}</td>
                `;

                tableBody.appendChild(row);
            });
        };

        statusFilter.addEventListener('change', (e) => {
            renderTable(e.target.value);
        });

        tableBody.addEventListener('click', (e) => {
            const button = e.target;
            if (!button.classList.contains('btn')) return;

            const row = button.closest('tr');
            const reportId = parseInt(row.querySelector('td:first-child').textContent);
            const report = allReports.find(r => r.id === reportId);
            const action = button.dataset.action;

            if (!report) return;

            if (action === 'view') {
                alert(`Viewing Report ${report.id} (${report.name})\nEmployee: ${report.employee}\nManager: ${report.manager}\nStatus: ${report.status}\n\n(This would open a detailed expense modal.)`);
                return;
            }
            
            if (action === 'override') {
                const currentStatus = report.status;
                const newStatus = prompt(`Current Status is ${currentStatus}. Enter new status (e.g., APPROVED or REJECTED):`).toUpperCase();
                
                if (newStatus && (newStatus === 'APPROVED' || newStatus === 'REJECTED')) {
                    report.status = newStatus.charAt(0) + newStatus.slice(1).toLowerCase(); 
                    
                    renderTable(statusFilter.value); 
                    alert(`Report ${reportId} status successfully overridden to ${newStatus}!`);
                } else if (newStatus) {
                    alert('Invalid status entered. Must be APPROVED or REJECTED.');
                }
            }
        });

        renderTable('ALL');
    });
</script>

</body>
</html>
